import { <%= entity.className %>Repository, <%= entity.className %>Entity } from '<%= projectDomain %>';
import { <%= entity.className %><%= type.className %>Mapper } from './mapper/<%= entity.fileName %>-<%= type.fileName %>.mapper';
import { <%= entity.className %><%= type.className %>Dto } from './dto/<%= entity.fileName %>-<%= type.fileName %>.dto';
import { Observable, of } from 'rxjs';
import { map } from 'rxjs/operators';
<% if (injectable) { %>
import { Injectable } from '@nx-clean/core';
<% } %>

<% if (injectable) { %>
@Injectable()
<% } %>
export class <%= entity.className %><%= type.className %>Repository implements <%= entity.className %>Repository {
  constructor(private data: <%= entity.className %><%= type.className %>Dto[] = []) {}

  private mapper = new <%= entity.className %><%= type.className %>Mapper();

  public getAll<%= entity.className %>s(): Observable<<%= entity.className %>Entity[]> {
    return of(this.data).pipe(map((<%= type.propertyName %>s) => <%= type.propertyName %>s.map(this.mapper.mapTo)));
  }

  public add<%= entity.className %>({ name }: Pick<<%= entity.className %>Entity, 'name'>): Observable<<%= entity.className %>Entity> {
    const id = 'item-' + new Date().getTime();
    const <%= entity.propertyName %>: <%= entity.className %>Entity = <%= entity.className %>Entity.create({ id, name });

    this.data.push(this.mapper.mapFrom(<%= entity.propertyName %>));
    return of(<%= entity.propertyName %>);
  }

  public get<%= entity.className %>ById(id: string): Observable<<%= entity.className %>Entity> {
    return of<<%= entity.className %><%= type.className %>Dto>(
      this.data.find((<%= entity.propertyName %>) => <%= entity.propertyName %>.id === id) as <%= entity.className %><%= type.className %>Dto
    ).pipe(map(this.mapper.mapTo));
  }

  public update<%= entity.className %>(id: string, <%= entity.propertyName %>: <%= entity.className %>Entity): Observable<<%= entity.className %>Entity> {
    const record = this.data.findIndex((<%= entity.propertyName %>) => <%= entity.propertyName %>.id === id)
    this.data[record] = this.mapper.mapFrom(<%= entity.propertyName %>);
    return of(this.mapper.mapTo(this.data[record]));
  }

  public remove<%= entity.className %>(id: string): Observable<<%= entity.className %>Entity> {
    const idx = this.data.findIndex((t) => t.id === id);
    const <%= entity.propertyName %> = this.data.find((t) => t.id === id);

    this.data.splice(idx, 1);

    return of<<%= entity.className %><%= type.className %>Dto>(<%= entity.propertyName %> as <%= entity.className %><%= type.className %>Dto).pipe(map(this.mapper.mapTo));
  }
}
